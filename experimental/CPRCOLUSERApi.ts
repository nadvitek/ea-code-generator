/* tslint:disable */
/* eslint-disable */
/**
 * Col User API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.50
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { runtime } from '@cz.cez.cpr.restapi/common';
import {
    AccessCaseDto,
    AccessCaseDtoFromJSON,
    AccessCaseDtoToJSON,
    CreateRelationBodyDto,
    CreateRelationBodyDtoFromJSON,
    CreateRelationBodyDtoToJSON,
    InlineObjectDto,
    InlineObjectDtoFromJSON,
    InlineObjectDtoToJSON,
    LoginEntryDto,
    LoginEntryDtoFromJSON,
    LoginEntryDtoToJSON,
    PartnerDto,
    PartnerDtoFromJSON,
    PartnerDtoToJSON,
    PartnerTypeDto,
    PartnerTypeDtoFromJSON,
    PartnerTypeDtoToJSON,
    RemovePartnerRelationBodyDto,
    RemovePartnerRelationBodyDtoFromJSON,
    RemovePartnerRelationBodyDtoToJSON,
    TokenDataDto,
    TokenDataDtoFromJSON,
    TokenDataDtoToJSON,
    UpdateUserParamsDto,
    UpdateUserParamsDtoFromJSON,
    UpdateUserParamsDtoToJSON,
    UserDto,
    UserDtoFromJSON,
    UserDtoToJSON,
    UserMergeDto,
    UserMergeDtoFromJSON,
    UserMergeDtoToJSON,
    UserWithAccessDto,
    UserWithAccessDtoFromJSON,
    UserWithAccessDtoToJSON,
    VerifyRelationBirthdayBodyDto,
    VerifyRelationBirthdayBodyDtoFromJSON,
    VerifyRelationBirthdayBodyDtoToJSON,
    VerifyRelationBodyDto,
    VerifyRelationBodyDtoFromJSON,
    VerifyRelationBodyDtoToJSON,
} from '../models';

export interface CreatePartnerRelationRequest {
    createRelationBodyDto: CreateRelationBodyDto;
}

export interface GetUserPartnersRequest {
    detailFlag: boolean;
    partnerIdCol: string;
}

export interface RemoveAccessCaseRequest {
    caseGuidIsu: string;
}

export interface RemovePartnerRelationRequest {
    removePartnerRelationBodyDto: RemovePartnerRelationBodyDto;
}

export interface RemoveUserAccessToPartnerRequest {
    inlineObjectDto: InlineObjectDto;
}

export interface SetUserStandardPartnerRequest {
    partnerIdCrm: string;
}

export interface UpdateUserDataRequest {
    updateUserParamsDto: UpdateUserParamsDto;
}

export interface VerifyPartnerRelationRequest {
    verifyRelationBodyDto: VerifyRelationBodyDto;
}

export interface VerifyPartnerRelationBirthDateRequest {
    verifyRelationBirthdayBodyDto: VerifyRelationBirthdayBodyDto;
    individualBirthDate?: Date;
    legalEntityNumber?: string;
}

/**
 * 
 */
export class CPRCOLUSERApi extends runtime.BaseAPI {

    /**
     * rest api to cancel user
     * Cancel user
     */
    async cancelUserRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * rest api to cancel user
     * Cancel user
     */
    async cancelUser(): Promise<void> {
        await this.cancelUserRaw();
    }

    /**
     * pair user with partner
     * CreatePartnerRelation
     */
    async createPartnerRelationRaw(requestParameters: CreatePartnerRelationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createRelationBodyDto === null || requestParameters.createRelationBodyDto === undefined) {
            throw new runtime.RequiredError('createRelationBodyDto','Required parameter requestParameters.createRelationBodyDto was null or undefined when calling createPartnerRelation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/partner-relation/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRelationBodyDtoToJSON(requestParameters.createRelationBodyDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * pair user with partner
     * CreatePartnerRelation
     */
    async createPartnerRelation(requestParameters: CreatePartnerRelationRequest): Promise<void> {
        await this.createPartnerRelationRaw(requestParameters);
    }

    /**
     * Get user detail 
     * Get Detail
     */
    async getDetailRaw(): Promise<runtime.ApiResponse<UserDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Get user detail 
     * Get Detail
     */
    async getDetail(): Promise<UserDto> {
        const response = await this.getDetailRaw();
        return await response.value();
    }

    /**
     * get token data for currently logged user
     * Read User Token Data
     */
    async getTokenDataRaw(): Promise<runtime.ApiResponse<TokenDataDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/token-data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenDataDtoFromJSON(jsonValue));
    }

    /**
     * get token data for currently logged user
     * Read User Token Data
     */
    async getTokenData(): Promise<TokenDataDto> {
        const response = await this.getTokenDataRaw();
        return await response.value();
    }

    /**
     * get all access case requests for the given user
     * Get access cases
     */
    async getUserAccessCasesRaw(): Promise<runtime.ApiResponse<Array<AccessCaseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/access-cases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccessCaseDtoFromJSON));
    }

    /**
     * get all access case requests for the given user
     * Get access cases
     */
    async getUserAccessCases(): Promise<Array<AccessCaseDto>> {
        const response = await this.getUserAccessCasesRaw();
        return await response.value();
    }

    /**
     * returns login history of currently logged in user
     * GetLoginHistory
     */
    async getUserLoginHistoryRaw(): Promise<runtime.ApiResponse<Array<LoginEntryDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/login-history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LoginEntryDtoFromJSON));
    }

    /**
     * returns login history of currently logged in user
     * GetLoginHistory
     */
    async getUserLoginHistory(): Promise<Array<LoginEntryDto>> {
        const response = await this.getUserLoginHistoryRaw();
        return await response.value();
    }

    /**
     * Get all partners for the given user
     * GetUserPartners
     */
    async getUserPartnersRaw(requestParameters: GetUserPartnersRequest): Promise<runtime.ApiResponse<Array<PartnerDto>>> {
        if (requestParameters.detailFlag === null || requestParameters.detailFlag === undefined) {
            throw new runtime.RequiredError('detailFlag','Required parameter requestParameters.detailFlag was null or undefined when calling getUserPartners.');
        }

        if (requestParameters.partnerIdCol === null || requestParameters.partnerIdCol === undefined) {
            throw new runtime.RequiredError('partnerIdCol','Required parameter requestParameters.partnerIdCol was null or undefined when calling getUserPartners.');
        }

        const queryParameters: any = {};

        if (requestParameters.detailFlag !== undefined) {
            queryParameters['detailFlag'] = requestParameters.detailFlag;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{partnerIdCol}/partners`.replace(`{${"partnerIdCol"}}`, encodeURIComponent(String(requestParameters.partnerIdCol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PartnerDtoFromJSON));
    }

    /**
     * Get all partners for the given user
     * GetUserPartners
     */
    async getUserPartners(requestParameters: GetUserPartnersRequest): Promise<Array<PartnerDto>> {
        const response = await this.getUserPartnersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user accounts to merge
     * GetUsersToMerge
     */
    async getUsersToMergeRaw(): Promise<runtime.ApiResponse<Array<UserWithAccessDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/users-to-merge`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserWithAccessDtoFromJSON));
    }

    /**
     * Get user accounts to merge
     * GetUsersToMerge
     */
    async getUsersToMerge(): Promise<Array<UserWithAccessDto>> {
        const response = await this.getUsersToMergeRaw();
        return await response.value();
    }

    /**
     * it removes access case by GUID
     * Remove access case
     */
    async removeAccessCaseRaw(requestParameters: RemoveAccessCaseRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseGuidIsu === null || requestParameters.caseGuidIsu === undefined) {
            throw new runtime.RequiredError('caseGuidIsu','Required parameter requestParameters.caseGuidIsu was null or undefined when calling removeAccessCase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/access-cases/{caseGuidIsu}`.replace(`{${"caseGuidIsu"}}`, encodeURIComponent(String(requestParameters.caseGuidIsu))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * it removes access case by GUID
     * Remove access case
     */
    async removeAccessCase(requestParameters: RemoveAccessCaseRequest): Promise<void> {
        await this.removeAccessCaseRaw(requestParameters);
    }

    /**
     * remove relation between the current user and a partner
     * RemovePartnerRelation
     */
    async removePartnerRelationRaw(requestParameters: RemovePartnerRelationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.removePartnerRelationBodyDto === null || requestParameters.removePartnerRelationBodyDto === undefined) {
            throw new runtime.RequiredError('removePartnerRelationBodyDto','Required parameter requestParameters.removePartnerRelationBodyDto was null or undefined when calling removePartnerRelation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/partner-relation/remove`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemovePartnerRelationBodyDtoToJSON(requestParameters.removePartnerRelationBodyDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * remove relation between the current user and a partner
     * RemovePartnerRelation
     */
    async removePartnerRelation(requestParameters: RemovePartnerRelationRequest): Promise<void> {
        await this.removePartnerRelationRaw(requestParameters);
    }

    /**
     * Remove User Access To Partner
     */
    async removeUserAccessToPartnerRaw(requestParameters: RemoveUserAccessToPartnerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inlineObjectDto === null || requestParameters.inlineObjectDto === undefined) {
            throw new runtime.RequiredError('inlineObjectDto','Required parameter requestParameters.inlineObjectDto was null or undefined when calling removeUserAccessToPartner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/users-to-merge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectDtoToJSON(requestParameters.inlineObjectDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove User Access To Partner
     */
    async removeUserAccessToPartner(requestParameters: RemoveUserAccessToPartnerRequest): Promise<void> {
        await this.removeUserAccessToPartnerRaw(requestParameters);
    }

    /**
     * Save contract agreement for providing CEZ-ONLINE service
     * SaveContractAgreement
     */
    async saveContractAgreementRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/contract-agreement`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Save contract agreement for providing CEZ-ONLINE service
     * SaveContractAgreement
     */
    async saveContractAgreement(): Promise<void> {
        await this.saveContractAgreementRaw();
    }

    /**
     * Set user standard partner
     * SetUserStandardPartner
     */
    async setUserStandardPartnerRaw(requestParameters: SetUserStandardPartnerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partnerIdCrm === null || requestParameters.partnerIdCrm === undefined) {
            throw new runtime.RequiredError('partnerIdCrm','Required parameter requestParameters.partnerIdCrm was null or undefined when calling setUserStandardPartner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/partners/{partnerIdCrm}/standard`.replace(`{${"partnerIdCrm"}}`, encodeURIComponent(String(requestParameters.partnerIdCrm))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set user standard partner
     * SetUserStandardPartner
     */
    async setUserStandardPartner(requestParameters: SetUserStandardPartnerRequest): Promise<void> {
        await this.setUserStandardPartnerRaw(requestParameters);
    }

    /**
     * Update User Data
     * UpdateUserData
     */
    async updateUserDataRaw(requestParameters: UpdateUserDataRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateUserParamsDto === null || requestParameters.updateUserParamsDto === undefined) {
            throw new runtime.RequiredError('updateUserParamsDto','Required parameter requestParameters.updateUserParamsDto was null or undefined when calling updateUserData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserParamsDtoToJSON(requestParameters.updateUserParamsDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update User Data
     * UpdateUserData
     */
    async updateUserData(requestParameters: UpdateUserDataRequest): Promise<void> {
        await this.updateUserDataRaw(requestParameters);
    }

    /**
     * Verify partner relation through CRM ID
     * VerifyPartnerRelation
     */
    async verifyPartnerRelationRaw(requestParameters: VerifyPartnerRelationRequest): Promise<runtime.ApiResponse<PartnerTypeDto>> {
        if (requestParameters.verifyRelationBodyDto === null || requestParameters.verifyRelationBodyDto === undefined) {
            throw new runtime.RequiredError('verifyRelationBodyDto','Required parameter requestParameters.verifyRelationBodyDto was null or undefined when calling verifyPartnerRelation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/verifyPartnerRelation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyRelationBodyDtoToJSON(requestParameters.verifyRelationBodyDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerTypeDtoFromJSON(jsonValue));
    }

    /**
     * Verify partner relation through CRM ID
     * VerifyPartnerRelation
     */
    async verifyPartnerRelation(requestParameters: VerifyPartnerRelationRequest): Promise<PartnerTypeDto> {
        const response = await this.verifyPartnerRelationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Verify partner relation through birthdate, ico
     * VerifyPartnerRelationBirthdate
     */
    async verifyPartnerRelationBirthDateRaw(requestParameters: VerifyPartnerRelationBirthDateRequest): Promise<runtime.ApiResponse<UserMergeDto>> {
        if (requestParameters.verifyRelationBirthdayBodyDto === null || requestParameters.verifyRelationBirthdayBodyDto === undefined) {
            throw new runtime.RequiredError('verifyRelationBirthdayBodyDto','Required parameter requestParameters.verifyRelationBirthdayBodyDto was null or undefined when calling verifyPartnerRelationBirthDate.');
        }

        const queryParameters: any = {};

        if (requestParameters.individualBirthDate !== undefined) {
            queryParameters['individualBirthDate'] = (requestParameters.individualBirthDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.legalEntityNumber !== undefined) {
            queryParameters['legalEntityNumber'] = requestParameters.legalEntityNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/verifyPartnerRelation/date`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyRelationBirthdayBodyDtoToJSON(requestParameters.verifyRelationBirthdayBodyDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMergeDtoFromJSON(jsonValue));
    }

    /**
     * Verify partner relation through birthdate, ico
     * VerifyPartnerRelationBirthdate
     */
    async verifyPartnerRelationBirthDate(requestParameters: VerifyPartnerRelationBirthDateRequest): Promise<UserMergeDto> {
        const response = await this.verifyPartnerRelationBirthDateRaw(requestParameters);
        return await response.value();
    }

}
